// Form1.h
#pragma once

#include "Seat.h"
#include "Customer.h"
#include "BookingManager.h"
#include "PriceCalculator.h"

namespace CppCLRWinFormsProject {

    using namespace System;
    using namespace System::ComponentModel;
    using namespace System::Collections;
    using namespace System::Windows::Forms;
    using namespace System::Data;
    //using namespace System::Drawing;
    using namespace System::IO;
    using namespace System::Collections::Generic;

    public ref class Form1 : public System::Windows::Forms::Form
    {
    public:
        Form1(void)
        {
            InitializeComponent();

            // Event subscriptions for customer detail text boxes (for placeholder text behavior)
            textBoxFirstName->Enter += gcnew EventHandler(this, &Form1::textBox_Enter);
            textBoxFirstName->Leave += gcnew EventHandler(this, &Form1::textBox_Leave);
            textBoxLastName->Enter += gcnew EventHandler(this, &Form1::textBox_Enter);
            textBoxLastName->Leave += gcnew EventHandler(this, &Form1::textBox_Leave);
            textBoxPhone->Enter += gcnew EventHandler(this, &Form1::textBox_Enter);
            textBoxPhone->Leave += gcnew EventHandler(this, &Form1::textBox_Leave);

            // NEW: Event subscriptions for the new textBoxTotalPrice (for placeholder text behavior)
            textBoxTotalPrice->Enter += gcnew EventHandler(this, &Form1::textBox_Enter);
            textBoxTotalPrice->Leave += gcnew EventHandler(this, &Form1::textBox_Leave);


            // Event subscriptions for combo boxes and buttons
            comboBox1->SelectedIndexChanged += gcnew EventHandler(this, &Form1::comboBox1_SelectedIndexChanged);
            comboBox2->SelectedIndexChanged += gcnew EventHandler(this, &Form1::comboBox2_SelectedIndexChanged); // Make sure this is subscribed for price changes
            buttonBookSeats->Click += gcnew EventHandler(this, &Form1::buttonBookSeats_Click);
            buttonReset->Click += gcnew EventHandler(this, &Form1::buttonReset_Click);

            // Initialize comboBox1 items for flight classes
            comboBox1->Items->Add("Economy");
            comboBox1->Items->Add("Business");
            comboBox1->Items->Add("First Class");
            comboBox1->SelectedIndex = -1; // Set initial selection to nothing
            comboBox1->Text = "SELECT CLASS"; // Placeholder text

            if (!this->DesignMode)
            {
                // Define ALL seat TextBoxes in an array for easier management and passing to BookingManager
                
                array<TextBox^>^ uiSeatTextBoxes = {
                    A1, A2, A3,
                    B1, B2, B3,
                    C1, C2, C3,
                    D1, D2, D3,
                    E1, E2, E3,
                    F1, F2, F3
                };

                // Initialize the BookingManager, passing it all UI seat TextBoxes
                _bookingManager = gcnew BookingManager(uiSeatTextBoxes);

                // Subscribe each seat's associated TextBox to the click event
                for each (Seat ^ seatObj in _bookingManager->GetAllSeats())
                {
                    seatObj->AssociatedTextBox->Click += gcnew EventHandler(this, &Form1::seatTextBox_Click);
                }

                // Initialize the list to hold multiple selected seats
                _selectedSeats = gcnew List<Seat^>();

                // Load existing bookings on startup to update seat status
                _bookingManager->LoadBookedSeats();

                // Set initial placeholder for total price
                textBoxTotalPrice->Text = "TOTAL PRICE";
                textBoxTotalPrice->ForeColor = Color::White;
            }
        }

    protected:
        // Destructor to clean up components and the BookingManager
        ~Form1()
        {
            if (components)
            {
                delete components;
            }
            if (_bookingManager) {
                delete _bookingManager;
            }
            if (_selectedSeats) { 
                delete _selectedSeats;
            }
        }

    private:
        // UI Controls (these are automatically generated by the designer, just listed for clarity)
        System::Windows::Forms::ComboBox^ comboBox1;
        System::Windows::Forms::ComboBox^ comboBox2;
        System::Windows::Forms::TextBox^ textBoxFirstName;
        System::Windows::Forms::TextBox^ textBoxLastName;
        System::Windows::Forms::TextBox^ textBoxPhone;
        System::Windows::Forms::TextBox^ textBoxTotalPrice; // NEW: Declare the total price text box

        // Seat TextBoxes (list all of them as they are direct members of Form1)
        System::Windows::Forms::TextBox^ A1;
        System::Windows::Forms::TextBox^ A2;
        System::Windows::Forms::TextBox^ A3;
        System::Windows::Forms::TextBox^ B1;
        System::Windows::Forms::TextBox^ B2;
        System::Windows::Forms::TextBox^ B3;
        System::Windows::Forms::TextBox^ C1;
        System::Windows::Forms::TextBox^ C2;
        System::Windows::Forms::TextBox^ C3;
        System::Windows::Forms::TextBox^ D1;
        System::Windows::Forms::TextBox^ D2;
        System::Windows::Forms::TextBox^ D3;
        System::Windows::Forms::TextBox^ E1;
        System::Windows::Forms::TextBox^ E2;
        System::Windows::Forms::TextBox^ E3;
        System::Windows::Forms::TextBox^ F1;
        System::Windows::Forms::TextBox^ F2;
        System::Windows::Forms::TextBox^ F3;

        System::Windows::Forms::Button^ buttonBookSeats;
        System::Windows::Forms::Button^ buttonReset;

        System::ComponentModel::Container^ components; // Designer component container

        // Private member for the BookingManager instance
        BookingManager^ _bookingManager;
private: System::Windows::Forms::GroupBox^ groupBox1;

private: System::Windows::Forms::GroupBox^ groupBox3;
private: System::Windows::Forms::GroupBox^ groupBox2;
       // List to keep track of currently selected seats by the user
        List<Seat^>^ _selectedSeats;


#pragma region Windows Form Designer generated code
        // This region contains code generated by the Visual Studio Designer.
        // It's crucial to ensure this part is intact and matches your actual form design.
        // If you copy-paste this whole file, make sure the designer code matches your project.
        void InitializeComponent(void)
        {
            this->comboBox1 = (gcnew System::Windows::Forms::ComboBox());
            this->comboBox2 = (gcnew System::Windows::Forms::ComboBox());
            this->textBoxFirstName = (gcnew System::Windows::Forms::TextBox());
            this->textBoxLastName = (gcnew System::Windows::Forms::TextBox());
            this->textBoxPhone = (gcnew System::Windows::Forms::TextBox());
            this->A1 = (gcnew System::Windows::Forms::TextBox());
            this->A2 = (gcnew System::Windows::Forms::TextBox());
            this->A3 = (gcnew System::Windows::Forms::TextBox());
            this->B1 = (gcnew System::Windows::Forms::TextBox());
            this->B2 = (gcnew System::Windows::Forms::TextBox());
            this->B3 = (gcnew System::Windows::Forms::TextBox());
            this->C1 = (gcnew System::Windows::Forms::TextBox());
            this->C2 = (gcnew System::Windows::Forms::TextBox());
            this->C3 = (gcnew System::Windows::Forms::TextBox());
            this->D1 = (gcnew System::Windows::Forms::TextBox());
            this->D2 = (gcnew System::Windows::Forms::TextBox());
            this->D3 = (gcnew System::Windows::Forms::TextBox());
            this->E1 = (gcnew System::Windows::Forms::TextBox());
            this->E2 = (gcnew System::Windows::Forms::TextBox());
            this->E3 = (gcnew System::Windows::Forms::TextBox());
            this->F1 = (gcnew System::Windows::Forms::TextBox());
            this->F2 = (gcnew System::Windows::Forms::TextBox());
            this->F3 = (gcnew System::Windows::Forms::TextBox());
            this->buttonBookSeats = (gcnew System::Windows::Forms::Button());
            this->buttonReset = (gcnew System::Windows::Forms::Button());
            this->textBoxTotalPrice = (gcnew System::Windows::Forms::TextBox());
            this->groupBox1 = (gcnew System::Windows::Forms::GroupBox());
            this->groupBox3 = (gcnew System::Windows::Forms::GroupBox());
            this->groupBox2 = (gcnew System::Windows::Forms::GroupBox());
            this->groupBox1->SuspendLayout();
            this->SuspendLayout();
            // 
            // comboBox1
            // 
            this->comboBox1->BackColor = System::Drawing::Color::Black;
            this->comboBox1->ForeColor = System::Drawing::Color::White;
            this->comboBox1->Location = System::Drawing::Point(487, 50);
            this->comboBox1->Name = L"comboBox1";
            this->comboBox1->Size = System::Drawing::Size(121, 21);
            this->comboBox1->TabIndex = 0;
            this->comboBox1->Text = L"SELECT CLASS";
            this->comboBox1->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::comboBox1_SelectedIndexChanged_1);
            // 
            // comboBox2
            // 
            this->comboBox2->BackColor = System::Drawing::Color::Black;
            this->comboBox2->ForeColor = System::Drawing::Color::White;
            this->comboBox2->Location = System::Drawing::Point(487, 86);
            this->comboBox2->Name = L"comboBox2";
            this->comboBox2->Size = System::Drawing::Size(121, 21);
            this->comboBox2->TabIndex = 1;
            this->comboBox2->Text = L"PRICES";
            this->comboBox2->SelectedIndexChanged += gcnew System::EventHandler(this, &Form1::comboBox2_SelectedIndexChanged);
            // 
            // textBoxFirstName
            // 
            this->textBoxFirstName->BackColor = System::Drawing::Color::Black;
            this->textBoxFirstName->ForeColor = System::Drawing::Color::White;
            this->textBoxFirstName->Location = System::Drawing::Point(6, 21);
            this->textBoxFirstName->Name = L"textBoxFirstName";
            this->textBoxFirstName->Size = System::Drawing::Size(100, 20);
            this->textBoxFirstName->TabIndex = 2;
            this->textBoxFirstName->Text = L"FIRST NAME";
            this->textBoxFirstName->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            this->textBoxFirstName->TextChanged += gcnew System::EventHandler(this, &Form1::textBoxFirstName_TextChanged);
            // 
            // textBoxLastName
            // 
            this->textBoxLastName->BackColor = System::Drawing::Color::Black;
            this->textBoxLastName->ForeColor = System::Drawing::Color::White;
            this->textBoxLastName->Location = System::Drawing::Point(112, 22);
            this->textBoxLastName->Name = L"textBoxLastName";
            this->textBoxLastName->Size = System::Drawing::Size(100, 20);
            this->textBoxLastName->TabIndex = 3;
            this->textBoxLastName->Text = L"LAST NAME";
            this->textBoxLastName->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // textBoxPhone
            // 
            this->textBoxPhone->BackColor = System::Drawing::Color::Black;
            this->textBoxPhone->ForeColor = System::Drawing::Color::White;
            this->textBoxPhone->Location = System::Drawing::Point(218, 22);
            this->textBoxPhone->Name = L"textBoxPhone";
            this->textBoxPhone->Size = System::Drawing::Size(100, 20);
            this->textBoxPhone->TabIndex = 4;
            this->textBoxPhone->Text = L"PHONE NO";
            this->textBoxPhone->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // A1
            // 
            this->A1->BackColor = System::Drawing::Color::Black;
            this->A1->ForeColor = System::Drawing::Color::White;
            this->A1->Location = System::Drawing::Point(53, 107);
            this->A1->Name = L"A1";
            this->A1->ReadOnly = true;
            this->A1->Size = System::Drawing::Size(62, 20);
            this->A1->TabIndex = 5;
            this->A1->Text = L"A1";
            this->A1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            this->A1->TextChanged += gcnew System::EventHandler(this, &Form1::A1_TextChanged);
            // 
            // A2
            // 
            this->A2->BackColor = System::Drawing::Color::Black;
            this->A2->ForeColor = System::Drawing::Color::White;
            this->A2->Location = System::Drawing::Point(135, 107);
            this->A2->Name = L"A2";
            this->A2->ReadOnly = true;
            this->A2->Size = System::Drawing::Size(62, 20);
            this->A2->TabIndex = 6;
            this->A2->Text = L"A2";
            this->A2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // A3
            // 
            this->A3->BackColor = System::Drawing::Color::Black;
            this->A3->ForeColor = System::Drawing::Color::White;
            this->A3->Location = System::Drawing::Point(221, 107);
            this->A3->Name = L"A3";
            this->A3->ReadOnly = true;
            this->A3->Size = System::Drawing::Size(62, 20);
            this->A3->TabIndex = 7;
            this->A3->Text = L"A3";
            this->A3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // B1
            // 
            this->B1->BackColor = System::Drawing::Color::Black;
            this->B1->ForeColor = System::Drawing::Color::White;
            this->B1->Location = System::Drawing::Point(53, 147);
            this->B1->Name = L"B1";
            this->B1->ReadOnly = true;
            this->B1->Size = System::Drawing::Size(62, 20);
            this->B1->TabIndex = 8;
            this->B1->Text = L"B1";
            this->B1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // B2
            // 
            this->B2->BackColor = System::Drawing::Color::Black;
            this->B2->ForeColor = System::Drawing::Color::White;
            this->B2->Location = System::Drawing::Point(135, 147);
            this->B2->Name = L"B2";
            this->B2->ReadOnly = true;
            this->B2->Size = System::Drawing::Size(62, 20);
            this->B2->TabIndex = 9;
            this->B2->Text = L"B2";
            this->B2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // B3
            // 
            this->B3->BackColor = System::Drawing::Color::Black;
            this->B3->ForeColor = System::Drawing::Color::White;
            this->B3->Location = System::Drawing::Point(221, 147);
            this->B3->Name = L"B3";
            this->B3->ReadOnly = true;
            this->B3->Size = System::Drawing::Size(62, 20);
            this->B3->TabIndex = 10;
            this->B3->Text = L"B3";
            this->B3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // C1
            // 
            this->C1->BackColor = System::Drawing::Color::Black;
            this->C1->ForeColor = System::Drawing::Color::White;
            this->C1->Location = System::Drawing::Point(53, 187);
            this->C1->Name = L"C1";
            this->C1->ReadOnly = true;
            this->C1->Size = System::Drawing::Size(62, 20);
            this->C1->TabIndex = 11;
            this->C1->Text = L"C1";
            this->C1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // C2
            // 
            this->C2->BackColor = System::Drawing::Color::Black;
            this->C2->ForeColor = System::Drawing::Color::White;
            this->C2->Location = System::Drawing::Point(135, 187);
            this->C2->Name = L"C2";
            this->C2->ReadOnly = true;
            this->C2->Size = System::Drawing::Size(62, 20);
            this->C2->TabIndex = 12;
            this->C2->Text = L"C2";
            this->C2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // C3
            // 
            this->C3->BackColor = System::Drawing::Color::Black;
            this->C3->ForeColor = System::Drawing::Color::White;
            this->C3->Location = System::Drawing::Point(221, 187);
            this->C3->Name = L"C3";
            this->C3->ReadOnly = true;
            this->C3->Size = System::Drawing::Size(62, 20);
            this->C3->TabIndex = 13;
            this->C3->Text = L"C3";
            this->C3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // D1
            // 
            this->D1->BackColor = System::Drawing::Color::Black;
            this->D1->ForeColor = System::Drawing::Color::White;
            this->D1->Location = System::Drawing::Point(53, 227);
            this->D1->Name = L"D1";
            this->D1->ReadOnly = true;
            this->D1->Size = System::Drawing::Size(62, 20);
            this->D1->TabIndex = 14;
            this->D1->Text = L"D1";
            this->D1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // D2
            // 
            this->D2->BackColor = System::Drawing::Color::Black;
            this->D2->ForeColor = System::Drawing::Color::White;
            this->D2->Location = System::Drawing::Point(135, 227);
            this->D2->Name = L"D2";
            this->D2->ReadOnly = true;
            this->D2->Size = System::Drawing::Size(62, 20);
            this->D2->TabIndex = 15;
            this->D2->Text = L"D2";
            this->D2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // D3
            // 
            this->D3->BackColor = System::Drawing::Color::Black;
            this->D3->ForeColor = System::Drawing::Color::White;
            this->D3->Location = System::Drawing::Point(221, 227);
            this->D3->Name = L"D3";
            this->D3->ReadOnly = true;
            this->D3->Size = System::Drawing::Size(62, 20);
            this->D3->TabIndex = 16;
            this->D3->Text = L"D3";
            this->D3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // E1
            // 
            this->E1->BackColor = System::Drawing::Color::Black;
            this->E1->ForeColor = System::Drawing::Color::White;
            this->E1->Location = System::Drawing::Point(53, 267);
            this->E1->Name = L"E1";
            this->E1->ReadOnly = true;
            this->E1->Size = System::Drawing::Size(62, 20);
            this->E1->TabIndex = 17;
            this->E1->Text = L"E1";
            this->E1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // E2
            // 
            this->E2->BackColor = System::Drawing::Color::Black;
            this->E2->ForeColor = System::Drawing::Color::White;
            this->E2->Location = System::Drawing::Point(135, 267);
            this->E2->Name = L"E2";
            this->E2->ReadOnly = true;
            this->E2->Size = System::Drawing::Size(62, 20);
            this->E2->TabIndex = 18;
            this->E2->Text = L"E2";
            this->E2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // E3
            // 
            this->E3->BackColor = System::Drawing::Color::Black;
            this->E3->ForeColor = System::Drawing::Color::White;
            this->E3->Location = System::Drawing::Point(221, 267);
            this->E3->Name = L"E3";
            this->E3->ReadOnly = true;
            this->E3->Size = System::Drawing::Size(62, 20);
            this->E3->TabIndex = 19;
            this->E3->Text = L"E3";
            this->E3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // F1
            // 
            this->F1->BackColor = System::Drawing::Color::Black;
            this->F1->ForeColor = System::Drawing::Color::White;
            this->F1->Location = System::Drawing::Point(53, 307);
            this->F1->Name = L"F1";
            this->F1->ReadOnly = true;
            this->F1->Size = System::Drawing::Size(62, 20);
            this->F1->TabIndex = 20;
            this->F1->Text = L"F1";
            this->F1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // F2
            // 
            this->F2->BackColor = System::Drawing::Color::Black;
            this->F2->ForeColor = System::Drawing::Color::White;
            this->F2->Location = System::Drawing::Point(135, 307);
            this->F2->Name = L"F2";
            this->F2->ReadOnly = true;
            this->F2->Size = System::Drawing::Size(62, 20);
            this->F2->TabIndex = 21;
            this->F2->Text = L"F2";
            this->F2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // F3
            // 
            this->F3->BackColor = System::Drawing::Color::Black;
            this->F3->ForeColor = System::Drawing::Color::White;
            this->F3->Location = System::Drawing::Point(221, 307);
            this->F3->Name = L"F3";
            this->F3->ReadOnly = true;
            this->F3->Size = System::Drawing::Size(62, 20);
            this->F3->TabIndex = 22;
            this->F3->Text = L"F3";
            this->F3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // buttonBookSeats
            // 
            this->buttonBookSeats->BackColor = System::Drawing::Color::Black;
            this->buttonBookSeats->ForeColor = System::Drawing::Color::White;
            this->buttonBookSeats->Location = System::Drawing::Point(487, 123);
            this->buttonBookSeats->Name = L"buttonBookSeats";
            this->buttonBookSeats->Size = System::Drawing::Size(121, 23);
            this->buttonBookSeats->TabIndex = 23;
            this->buttonBookSeats->Text = L"Book Seats";
            this->buttonBookSeats->UseVisualStyleBackColor = false;
            // 
            // buttonReset
            // 
            this->buttonReset->BackColor = System::Drawing::Color::Black;
            this->buttonReset->ForeColor = System::Drawing::Color::White;
            this->buttonReset->Location = System::Drawing::Point(487, 164);
            this->buttonReset->Name = L"buttonReset";
            this->buttonReset->Size = System::Drawing::Size(121, 22);
            this->buttonReset->TabIndex = 24;
            this->buttonReset->Text = L"Reset";
            this->buttonReset->UseVisualStyleBackColor = false;
            // 
            // textBoxTotalPrice
            // 
            this->textBoxTotalPrice->BackColor = System::Drawing::Color::Black;
            this->textBoxTotalPrice->ForeColor = System::Drawing::Color::White;
            this->textBoxTotalPrice->Location = System::Drawing::Point(487, 206);
            this->textBoxTotalPrice->Name = L"textBoxTotalPrice";
            this->textBoxTotalPrice->ReadOnly = true;
            this->textBoxTotalPrice->Size = System::Drawing::Size(121, 20);
            this->textBoxTotalPrice->TabIndex = 25;
            this->textBoxTotalPrice->Text = L"TOTAL PRICE";
            this->textBoxTotalPrice->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // groupBox1
            // 
            this->groupBox1->BackColor = System::Drawing::Color::Black;
            this->groupBox1->Controls->Add(this->textBoxPhone);
            this->groupBox1->Controls->Add(this->textBoxFirstName);
            this->groupBox1->Controls->Add(this->textBoxLastName);
            this->groupBox1->ForeColor = System::Drawing::Color::Silver;
            this->groupBox1->Location = System::Drawing::Point(12, 12);
            this->groupBox1->Name = L"groupBox1";
            this->groupBox1->Size = System::Drawing::Size(329, 68);
            this->groupBox1->TabIndex = 26;
            this->groupBox1->TabStop = false;
            this->groupBox1->Text = L"Customer Details";
            this->groupBox1->Enter += gcnew System::EventHandler(this, &Form1::groupBox1_Enter);
            // 
            // groupBox3
            // 
            this->groupBox3->BackColor = System::Drawing::Color::Black;
            this->groupBox3->ForeColor = System::Drawing::Color::Silver;
            this->groupBox3->Location = System::Drawing::Point(452, 23);
            this->groupBox3->Name = L"groupBox3";
            this->groupBox3->Size = System::Drawing::Size(208, 328);
            this->groupBox3->TabIndex = 27;
            this->groupBox3->TabStop = false;
            this->groupBox3->Text = L"Actions";
            // 
            // groupBox2
            // 
            this->groupBox2->BackColor = System::Drawing::Color::Black;
            this->groupBox2->ForeColor = System::Drawing::Color::Silver;
            this->groupBox2->Location = System::Drawing::Point(12, 86);
            this->groupBox2->Name = L"groupBox2";
            this->groupBox2->Size = System::Drawing::Size(329, 265);
            this->groupBox2->TabIndex = 27;
            this->groupBox2->TabStop = false;
            this->groupBox2->Text = L"Seat Mapping";
            this->groupBox2->Enter += gcnew System::EventHandler(this, &Form1::groupBox2_Enter);
            // 
            // Form1
            // 
            this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
            this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
            this->BackColor = System::Drawing::Color::DimGray;
            this->ClientSize = System::Drawing::Size(663, 378);
            this->Controls->Add(this->textBoxTotalPrice);
            this->Controls->Add(this->buttonReset);
            this->Controls->Add(this->buttonBookSeats);
            this->Controls->Add(this->F3);
            this->Controls->Add(this->F2);
            this->Controls->Add(this->F1);
            this->Controls->Add(this->E3);
            this->Controls->Add(this->E2);
            this->Controls->Add(this->E1);
            this->Controls->Add(this->D3);
            this->Controls->Add(this->D2);
            this->Controls->Add(this->D1);
            this->Controls->Add(this->C3);
            this->Controls->Add(this->C2);
            this->Controls->Add(this->C1);
            this->Controls->Add(this->B3);
            this->Controls->Add(this->B2);
            this->Controls->Add(this->B1);
            this->Controls->Add(this->A3);
            this->Controls->Add(this->A2);
            this->Controls->Add(this->A1);
            this->Controls->Add(this->comboBox2);
            this->Controls->Add(this->comboBox1);
            this->Controls->Add(this->groupBox1);
            this->Controls->Add(this->groupBox2);
            this->Controls->Add(this->groupBox3);
            this->Name = L"Form1";
            this->Text = L"Form1";
            this->Load += gcnew System::EventHandler(this, &Form1::Form1_Load);
            this->groupBox1->ResumeLayout(false);
            this->groupBox1->PerformLayout();
            this->ResumeLayout(false);
            this->PerformLayout();

        }
#pragma endregion

        // Helper method to update the total price display
        void UpdateTotalPriceDisplay() {
            if (_selectedSeats->Count > 0 && comboBox2->SelectedItem != nullptr) {
                double pricePerSeat = 0.0;
                if (Double::TryParse(comboBox2->SelectedItem->ToString(), pricePerSeat)) {
                    // Calculate total price using the PriceCalculator class
                    double totalPrice = PriceCalculator::CalculateTotalPrice(pricePerSeat, _selectedSeats->Count);
                    textBoxTotalPrice->Text = totalPrice.ToString("C"); // "C" for currency format
                    textBoxTotalPrice->ForeColor = Color::White;
                }
                else {
                    textBoxTotalPrice->Text = "Error: Invalid Price";
                    textBoxTotalPrice->ForeColor = Color::Red;
                }
            }
            else {
                // Reset total price if no seats selected or no price chosen
                textBoxTotalPrice->Text = "TOTAL PRICE";
                textBoxTotalPrice->ForeColor = Color::White;
            }
        }


        // --- Handles seat clicks for selection/deselection ---
        void seatTextBox_Click(Object^ sender, EventArgs^ e)
        {
            // Line 1: Get a direct reference to the visual box that was clicked
            TextBox^ clickedTextBox = safe_cast<TextBox^>(sender);

            // Line 2: Start looping through ALL the 'Seat' objects 
            for each (Seat ^ seatObj in _bookingManager->GetAllSeats())
            {
                if (seatObj->AssociatedTextBox == clickedTextBox)
                {
                    // If the seat is already permanently booked (red and disabled), do nothing
                    if (seatObj->IsBooked) {
                        return;
                    }

                    // Toggle selection logic:
                    if (_selectedSeats->Contains(seatObj)) {
                        // If seat is already selected, deselect it
                        _selectedSeats->Remove(seatObj);
                        seatObj->AssociatedTextBox->BackColor = Color::Black; // Revert to available color
                        seatObj->AssociatedTextBox->ForeColor = Color::White;
                    }
                    else {
                        // If seat is not selected, select it
                        _selectedSeats->Add(seatObj);
                        seatObj->AssociatedTextBox->BackColor = Color::Green; // Use Green for selected
                        seatObj->AssociatedTextBox->ForeColor = Color::White; // White text on green background
                    }
                    // NEW: Update the total price display after seat selection/deselection
                    UpdateTotalPriceDisplay();
                    return; // Seat found and handled, exit loop
                }
            }
        }

        // --- Updates the prices in comboBox2 based on comboBox1 (class) selection ---
        void comboBox1_SelectedIndexChanged(Object^ sender, EventArgs^ e)
        {
            comboBox2->Items->Clear(); // Clear previous prices
            if (comboBox1->SelectedItem != nullptr) {
                String^ selectedClass = comboBox1->SelectedItem->ToString();
                // Delegate to BookingManager to get prices for the selected class
                List<String^>^ prices = _bookingManager->GetPricesForClass(selectedClass);
                for each (String ^ price in prices) {
                    comboBox2->Items->Add(price);
                }
            }
            if (comboBox2->Items->Count > 0) {
                comboBox2->SelectedIndex = 0; // Automatically select the first price if available
            }
            else {
                comboBox2->Text = "PRICES"; // Reset placeholder if no prices
            }
            // NEW: Update the total price display after class change (which may change prices)
            UpdateTotalPriceDisplay();
        }

        // NEW: Handle changes in comboBox2 (price selection)
        void comboBox2_SelectedIndexChanged(System::Object^ sender, System::EventArgs^ e) {
            UpdateTotalPriceDisplay(); // Update total price when price selection changes
        }

        // --- Handles the "Book Seats" button click ---
        void buttonBookSeats_Click(Object^ sender, EventArgs^ e)
        {
            // Input validation for customer details
            if (String::IsNullOrWhiteSpace(textBoxFirstName->Text) || textBoxFirstName->Text == "FIRST NAME" ||
                String::IsNullOrWhiteSpace(textBoxLastName->Text) || textBoxLastName->Text == "LAST NAME" ||
                String::IsNullOrWhiteSpace(textBoxPhone->Text) || textBoxPhone->Text == "PHONE NO")
            {
                MessageBox::Show("Please fill in all your details (First Name, Last Name, Phone No).", "Missing Information", MessageBoxButtons::OK, MessageBoxIcon::Error);
                return;
            }

            // Validate seat selection
            if (_selectedSeats->Count == 0) { // Check if any seats are selected
                MessageBox::Show("Please select at least one seat first.", "No Seat Selected", MessageBoxButtons::OK, MessageBoxIcon::Error);
                return;
            }

            // Check if any selected seat is already booked (shouldn't happen with UI disable, but good for robustness)
            for each (Seat ^ selectedSeat in _selectedSeats) {
                if (selectedSeat->IsBooked) {
                    MessageBox::Show("One or more selected seats are already booked. Please deselect them.", "Already Booked", MessageBoxButtons::OK, MessageBoxIcon::Error);
                    return;
                }
            }

            // Validate class and price selection
            if (comboBox1->SelectedItem == nullptr || comboBox2->SelectedItem == nullptr) {
                MessageBox::Show("Please select a class and price.", "Missing Selection", MessageBoxButtons::OK, MessageBoxIcon::Error);
                return;
            }

            // Create a Customer object from input fields
            Customer^ newCustomer = gcnew Customer(textBoxFirstName->Text->Trim(),
                textBoxLastName->Text->Trim(),
                textBoxPhone->Text->Trim());

            // Get the calculated total price
            String^ finalTotalPrice = textBoxTotalPrice->Text;
            if (finalTotalPrice == "TOTAL PRICE" || finalTotalPrice == "Error: Invalid Price") {
                MessageBox::Show("Please ensure a valid price is calculated.", "Price Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
                return;
            }

            // Delegate the actual booking process to the BookingManager, passing all selected seats
            _bookingManager->SaveBooking(newCustomer, _selectedSeats, comboBox1->SelectedItem->ToString(), comboBox2->SelectedItem->ToString());

            // --- Display full booking details ---
            String^ bookedSeatsList = "";
            for each (Seat ^ temp_s in _selectedSeats) {
                bookedSeatsList += temp_s->SeatNumber + " ";
            }
            if (bookedSeatsList->Length > 0) {
                bookedSeatsList = bookedSeatsList->Trim(); // Remove trailing space
            }

            String^ confirmationMessage = String::Format(
                "Booking Confirmed!\n\n" +
                "Customer: {0} {1}\n" +
                "Phone: {2}\n" +
                "Class: {3}\n" +
                "Price per Seat: {4}\n" +
                "Total Price: {5}\n" + // NEW: Include Total Price
                "Seats Booked: {6}",
                newCustomer->FirstName, newCustomer->LastName, newCustomer->PhoneNumber,
                comboBox1->SelectedItem->ToString(), comboBox2->SelectedItem->ToString(),
                finalTotalPrice, // Use the calculated total price here
                bookedSeatsList
            );

            MessageBox::Show(confirmationMessage, "Booking Details", MessageBoxButtons::OK, MessageBoxIcon::Information);


            // After successful booking, clear customer details and selected seats from UI
            textBoxFirstName->Text = "FIRST NAME";
            textBoxLastName->Text = "LAST NAME";
            textBoxPhone->Text = "PHONE NO";
            textBoxFirstName->ForeColor = Color::White;
            textBoxLastName->ForeColor = Color::White;
            textBoxPhone->ForeColor = Color::White;

            // Clear the list of selected seats and revert their UI (already done by SaveBooking setting them to Red)
            _selectedSeats->Clear(); // Clear the tracked selected seats
            UpdateTotalPriceDisplay(); // NEW: Reset total price display after booking
        }

        // --- Handles the "Reset" button click ---
        void buttonReset_Click(System::Object^ sender, System::EventArgs^ e) {
            // Revert the appearance of any currently selected seats back to available (black)

            for each (Seat ^ seat in _selectedSeats) {
                if (!seat->IsBooked) { // Only revert if not already booked
                    seat->AssociatedTextBox->BackColor = Color::Black;
                    seat->AssociatedTextBox->ForeColor = Color::White;
                }
            }
            _selectedSeats->Clear(); // Clear the list of selected seats

            // Delegate system reset logic to the BookingManager
            _bookingManager->ResetSystem(); // This method now does not show a MessageBox


            // Reset UI input fields
            textBoxFirstName->Text = "FIRST NAME";
            textBoxLastName->Text = "LAST NAME";
            textBoxPhone->Text = "PHONE NO";
            textBoxFirstName->ForeColor = Color::White;
            textBoxLastName->ForeColor = Color::White;
            textBoxPhone->ForeColor = Color::White;

            // Reset UI combo boxes
            comboBox1->SelectedIndex = -1; // Deselect any item
            comboBox1->Text = "SELECT CLASS"; // Reset placeholder

            comboBox2->Items->Clear(); // Clear all price items
            comboBox2->SelectedIndex = -1; // Deselect any item
            comboBox2->Text = "PRICES"; // Reset placeholder

            UpdateTotalPriceDisplay(); // NEW: Reset total price display on system reset
        }

        // --- Handles placeholder text on textBox entry ---
        void textBox_Enter(System::Object^ sender, System::EventArgs^ e)
        {
            TextBox^ tb = safe_cast<TextBox^>(sender);
            if (tb->Text == "FIRST NAME" || tb->Text == "LAST NAME" || tb->Text == "PHONE NO" || tb->Text == "TOTAL PRICE") // NEW: Include TOTAL PRICE
            {
                tb->Text = "";
                tb->ForeColor = Color::White;
            }
        }

        // --- Handles placeholder text on textBox leave ---
        void textBox_Leave(System::Object^ sender, System::EventArgs^ e)
        {
            TextBox^ tb = safe_cast<TextBox^>(sender);
            if (String::IsNullOrWhiteSpace(tb->Text))
            {
                if (tb == textBoxFirstName)
                    tb->Text = "FIRST NAME";
                else if (tb == textBoxLastName)
                    tb->Text = "LAST NAME";
                else if (tb == textBoxPhone)
                    tb->Text = "PHONE NO";
                else if (tb == textBoxTotalPrice) // NEW: Handle total price placeholder
                    tb->Text = "TOTAL PRICE";

                tb->ForeColor = Color::White;
            }
        }


    private: System::Void textBox3_TextChanged(System::Object^ sender, System::EventArgs^ e) {
    }
    private: System::Void textBoxFirstName_TextChanged(System::Object^ sender, System::EventArgs^ e) {
    }
    private: System::Void A1_TextChanged(System::Object^ sender, System::EventArgs^ e) {
    }

    private: System::Void Form1_Load(System::Object^ sender, System::EventArgs^ e) {
    }
private: System::Void groupBox1_Enter(System::Object^ sender, System::EventArgs^ e) {
}
private: System::Void groupBox2_Enter(System::Object^ sender, System::EventArgs^ e) {
}
private: System::Void comboBox1_SelectedIndexChanged_1(System::Object^ sender, System::EventArgs^ e) {
}
};
}